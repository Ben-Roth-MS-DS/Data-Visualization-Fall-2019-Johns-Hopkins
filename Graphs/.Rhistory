expend.names$candidate.names = droplevels(expend.names$candidate.names)
expend.select = expend.names %>%
select(candidate.names, disbursement_amount, disbursement_description)
expend.select$disbursement_description = tolower(expend.select$disbursement_description)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
expend.select$disbursement_description = as.factor(expend.select$disbursement_description )
expend.select$disbursement_description = tolower(expend.select$disbursement_description)
expend.select$disbursement_description =  sapply(expend.select$disbursement_description, simpleCap)
#expend.select$disbursement_description[expend.select$disbursement_description == 'Travel'] <- 'Travel Expenses'
#expend.select$disbursement_description[expend.select$disbursement_description == 'Air Travel'] <- 'Travel Expenses'
#expend.select$disbursement_description[expend.select$disbursement_description == 'Staff Travel'] <- 'Travel Expenses'
#expend.select$disbursement_description[expend.select$disbursement_description == 'Transportation'] <- 'Travel Expenses'
expend.select$disbursement_description[expend.select$disbursement_description == 'Credit Card Processing Fees'] <- 'Credit Card Fees'
expend.select$disbursement_description[expend.select$disbursement_description == 'Credit Card Processing Fee'] <- 'Credit Card Fees'
expend.select$disbursement_description[expend.select$disbursement_description == 'Credit Card - See Below If Itemized'] <- 'Credit Card Payment'
expend.select$disbursement_description[expend.select$disbursement_description == 'Payroll - See Below If Itemized'] <- 'Payroll'
expend.select$disbursement_description[expend.select$disbursement_description == 'Payroll - See Detail'] <- 'Payroll'
#expend.select$disbursement_description[expend.select$disbursement_description == 'Credit Card Processing'] <- 'Credit Card Fees'
#expend.select$disbursement_description[expend.select$disbursement_description == 'Office Supplies'] <- 'Supplies'
#expend.select$disbursement_description[expend.select$disbursement_description == 'Internet Advertising'] <- 'Online Advertising'
expend.desc.summ = expend.select %>%
group_by(disbursement_description) %>%
summarise(Count = n())
expend.desc.head = head(expend.desc.summ %>% arrange(desc(Count)), 20)
plt.desc = expend.desc.head %>%
ggplot(aes(reorder(disbursement_description, -Count), Count)) +
geom_bar(stat = 'identity', fill = 'blue') +
theme_classic() +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10))+
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14, hjust = 1))+
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10, hjust = 1))+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = 'Most Frequent Democratic Presidential Primary Campaign Disbursements',
subtitle = 'FEC Data, Date Range: 1/1/2019-6/30/2019, downloaded 9/21/2019',
x = 'Disbursement Description',
y = 'Total Number of Disbursements') +
scale_y_continuous(labels = comma, limits = c(0,15000)) +
geom_text(aes(label=comma(Count), vjust=-0.5), size = 2.95)
plt.desc
contr.filt.2019 = contr.names %>%
mutate(contr.month = month(contribution_receipt_date)) %>%
select(contr.month, candidate.names, contribution_receipt_amount)
polls.select.filt = polls %>%
mutate(poll.month = as.numeric(format(as.Date(polls$end_date, format="%d/%m/%Y"),"%m")), next.month = poll.month + 1, lagged.month = poll.month - 1) %>%
filter(format(as.Date(polls$end_date, format="%d/%m/%Y"),"%Y") == "0019" & office_type == 'U.S. President' & party == 'DEM') %>%
select(poll.month, answer, pct, next.month, lagged.month)
polls.summ  = polls.select.filt %>%
group_by(answer, lagged.month) %>%
summarise(Polling.Average = mean(pct))
contr.summ = contr.filt.2019 %>%
group_by(contr.month, candidate.names) %>%
summarise(Total.Monthly.Donations = sum(contribution_receipt_amount))
contr.polls = merge(contr.summ, polls.summ, by.x = c("contr.month", "candidate.names"), by.y = c("lagged.month", "answer"), all.y = F)
r.squared = as.character(as.expression(format(summary(lm(Total.Monthly.Donations ~ Polling.Average, data = contr.polls, na.action=na.exclude))$r.squared, digits = 3)))
plt.contr.polls = contr.polls %>%
ggplot(aes(Polling.Average/100, Total.Monthly.Donations)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
geom_point(color = "blue") +
geom_text(x = .25, y = 1000000, label = paste("Pearson's R = ",r.squared, sep = "")) +
scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
scale_x_continuous(labels = scales::percent_format(suffix = "%")) +
theme_classic() +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10))+
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))+
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10))+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.caption = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=8)) +
labs(title = 'Campaign Contributions as a Funcion of\nLagged Polling Data, by Campaign',
caption = 'FEC Data, Date Range: 1/1/2019-6/30/2019, downloaded 9/21/2019;\nPolling data averaged from 538 compilation',
bottom = textGrob("grid caption", x = 1, hjust = 1, gp = gpar(fontface = 3L, fontsize = 9)),
y = 'Monthly Contribution Amount',
x = 'Lagged Month-Average Polling Percent') +
theme(plot.title = element_text(hjust = 0.5))
plt.contr.polls
expend.filt.2019 = expend.names %>%
mutate(expend.month = as.numeric(str_match(str_replace_all(expend.names$disbursement_date, "-", "k"), "k(.*?)k")[,2])) %>%
select(expend.month, candidate.names, disbursement_amount)
polls.summ  = polls.select.filt %>%
group_by(answer, next.month) %>%
summarise(Polling.Average = mean(pct))
expend.summ = expend.filt.2019 %>%
group_by(expend.month, candidate.names) %>%
summarise(Total.Monthly.Disbursements = sum(disbursement_amount))
expend.polls = merge(expend.summ, polls.summ, by.x = c("expend.month", "candidate.names"), by.y = c("next.month", "answer"), all.y = F)
r.squared = as.character(as.expression(format(summary(lm(Total.Monthly.Disbursements ~ Polling.Average, data = expend.polls))$r.squared, digits = 3)))
plt.expend.polls = expend.polls %>%
ggplot(aes( Total.Monthly.Disbursements, Polling.Average/100)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
geom_point(color = "blue") +
geom_text(y = .05, x = 9000000, label = paste("Pearson's R = ",r.squared, sep = "")) +
scale_x_continuous(labels = scales::dollar_format(prefix = "$")) +
scale_y_continuous(labels = scales::percent_format(suffix = "%")) +
theme_classic() +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10))+
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))+
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10))+
theme(plot.caption = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=8)) +
labs(title = 'Campaign Monthly Polling Average as a\nFunctionof Lagged Campaign Spending',
caption = 'FEC Data, Date Range: 1/1/2019-6/30/2019, downloaded 9/21/2019;\nPolling data averaged from 538 compilation',
bottom = textGrob("grid caption", x = 1, hjust = 1, gp = gpar(fontface = 3L, fontsize = 9)),
x = 'Lagged Monthly Disbursement Amount',
y = 'Month-Average Polling Percent') +
theme(plot.title = element_text(hjust = 0.5))
plt.expend.polls
expend.names2 = expend.names %>%
group_by(candidate.names) %>%
mutate(total.disbursement = sum(disbursement_amount))
expend.disb.perc = expend.names2 %>%
group_by(candidate.names, disbursement_purpose_category) %>%
mutate(Disbursement.Percent.Total = sum(disbursement_amount)/total.disbursement)
expend.disb.summ = expend.disb.perc  %>%
group_by(disbursement_purpose_category, candidate.names) %>%
summarize(Disbursement.Percent.Total = mean(Disbursement.Percent.Total),
Total.Disbursement = mean(total.disbursement))
test.df =  with(expend.disb.summ,
expand.grid(disbursement.purpose.category = levels(disbursement_purpose_category),
candidate.names = levels(candidate.names)))
expend.all.filled = merge(test.df, expend.disb.summ %>% select(-Total.Disbursement),
by.x = c('disbursement.purpose.category','candidate.names'),
by.y = c('disbursement_purpose_category', 'candidate.names'),
all.x = T)
expend.all.filled[is.na(expend.all.filled)] = 0
expend.all.wide = reshape(expend.all.filled, idvar = 'candidate.names',
timevar = 'disbursement.purpose.category',
direction = 'wide')
expend.cor = round(cor(expend.all.wide %>% select (-candidate.names)), 2)
colnames(expend.cor) = c("Administrative", 'Advertising', 'Contributions', 'Events', 'Fundraising', 'Repayments', 'Materials', 'Other', 'Refunds', 'Transfers', 'Travel')
rownames(expend.cor) = c("Administrative", 'Advertising', 'Contributions', 'Events', 'Fundraising', 'Repayments', 'Materials', 'Other', 'Refunds', 'Transfers', 'Travel')
plt.cor = ggcorrplot(expend.cor, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="square",
colors = c("red", "white", "blue"),
labs(title="Correlation of Disbursement Purpose Categories",
subtitle = "Democratic 2020 Primary Candidate Data"),
outline.color = 'black',
legend.title = 'Correlation',
ggtheme=theme_classic)
plt.cor
expend.filt = expend %>%
filter(committee_name %in% top.cand$committee_name) %>%
ungroup() %>%
merge(.,candidate.matching, by.x = "committee_name", by.y = "committee.names") %>%
filter(disbursement_purpose_category != 'OTHER' &
candidate.names != 'Hunter') %>%
group_by(candidate.names) %>%
mutate(total.disbursement = sum(disbursement_amount))
expend.disb.perc = expend.filt %>%
group_by(candidate.names, disbursement_purpose_category) %>%
mutate(Disbursement.Percent.Total = sum(disbursement_amount)/total.disbursement)
expend.disb.summ = expend.disb.perc  %>%
group_by(disbursement_purpose_category, candidate.names) %>%
summarize(Disbursement.Percent.Total = mean(Disbursement.Percent.Total),
Total.Disbursement = mean(total.disbursement))
test.df =  with(expend.disb.summ,
expand.grid(disbursement.purpose.category = levels(disbursement_purpose_category),
candidate.names = levels(candidate.names)))
expend.all.filled = merge(test.df, expend.disb.summ %>% select(-Total.Disbursement),
by.x = c('disbursement.purpose.category','candidate.names'),
by.y = c('disbursement_purpose_category', 'candidate.names'),
all.x = T)
expend.all.filled[is.na(expend.all.filled)] = 0
levels(expend.all.filled$disbursement.purpose.category) =
c("Administrative", "Advertising", "Contributions", "Events", "Fundraising", "Loan-Repayments", "Materials", "Other", "Refunds", "Transfers", "Travel")
plt.heat = expend.all.filled %>%
filter(disbursement.purpose.category != 'Other') %>%
ggplot(aes(disbursement.purpose.category, candidate.names)) +
geom_raster(aes(fill = Disbursement.Percent.Total)) +
theme_classic() +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10))+
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))+
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10))+
theme(plot.caption = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=8)) +
labs(title = 'Heatmap of Campaign Spending in Major FEC Categories,\n2020 President Election Democratic Primary Candidates',
subtitle = 'FEC Data, Date Range: 1/1/2019-6/30/2019, downloaded 9/21/2019',
x = 'Disbursement Purpose Category',
y = 'Democratic Primary Candidate') +
theme(legend.position = "right") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_gradient(low = "lightblue1", high = "darkblue",limits=c(0,1), labels = percent,
name = 'Percent of Total\nCampaign Spending')
plt.heat
#group by day of week
contr.group.date = contr.names %>%
group_by(contribution_receipt_date) %>%
summarise(Date.Total.Amount = sum(contribution_receipt_amount))
#finding the day no. of the week
contr.group.date$weekday = as.numeric(as.POSIXlt(contr.group.date$contribution_receipt_date)$wday)
#converting the day no. to factor
contr.group.date$weekdayf = factor(contr.group.date$weekday,levels=rev(1:7),
labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),
ordered=TRUE)
# finding the month
contr.group.date$monthf=factor(month(contr.group.date$contribution_receipt_date),
levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
#finding the year and the month from the date. Eg: Nov 2018
contr.group.date$yearmonth = factor(as.yearmon(contr.group.date$contribution_receipt_date))
#finding the week of the year for each date
contr.group.date$week = as.numeric(format(contr.group.date$contribution_receipt_date,"%W"))
contr.group.date$weekdayf[is.na(contr.group.date$weekdayf)] = 'Sun'
detach(package:dplyr)
library(plyr)
library(plotly)
#normalizing the week to start at 1 for every month
contr.group.date = ddply(contr.group.date,.(yearmonth),transform,monthweek=1+week-min(week))
contr.group.date2019 = contr.group.date %>%
filter(year(contribution_receipt_date) == 2019,
monthf != 'Jul',
monthf != 'Aug')
pltDate.Amt =
contr.group.date2019 %>%
ggplot(aes(monthweek, weekdayf, fill = contr.group.date2019$Date.Total.Amount/1000)) +
geom_tile(colour = "black") +
facet_grid(year(contr.group.date2019$contribution_receipt_date)~monthf) +
scale_fill_gradient(low="white", high="blue", labels=dollar) +
xlab("Week of Month") +
ylab("") +
ggtitle("Time-Series Calendar Heatmap, Democratic Presidential Primary:\nTotal Contributions by Day") +
labs(fill = "Contribution Amount\n(In Thousands)",
caption = 'Code: "Time-Series Calendar Heatmap" by Sarang Gupta, http://www.columbia.edu/~sg3637/blog/Time_Series_Heatmaps.html',
subtitle = 'FEC Data, Date Range: 1/1/2019-6/30/2019, downloaded 9/21/2019') +
theme_classic() +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10))+
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))+
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10))+
theme(plot.caption = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=8)) +
theme(legend.position = 'bottom') +
guides(fill = guide_colourbar(barwidth = 15, barheight = 1))
pltDate.Amt
detach(package:plyr)
library(dplyr)
contr.group.cand = contr.names %>%
group_by(candidate.names, contribution_receipt_date) %>%
summarise(Cand.Don.Amt = sum(contribution_receipt_amount)) %>%
arrange(contribution_receipt_date, desc(Cand.Don.Amt)) %>%
filter(year(contribution_receipt_date) == 2019)
contr.top.cand = contr.group.cand %>%
group_by(contribution_receipt_date) %>%
top_n(n = 1, wt = Cand.Don.Amt)
#finding the day no. of the week
contr.top.cand$weekday = as.numeric(as.POSIXlt(contr.top.cand$contribution_receipt_date)$wday)
#converting the day no. to factor
contr.top.cand$weekdayf = factor(contr.top.cand$weekday,levels=rev(1:7),
labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),
ordered=TRUE)
# finding the month
contr.top.cand$monthf=factor(month(contr.top.cand$contribution_receipt_date),
levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
#finding the year and the month from the date. Eg: Nov 2018
contr.top.cand$yearmonth = factor(as.yearmon(contr.top.cand$contribution_receipt_date))
#finding the week of the year for each date
contr.top.cand$week = as.numeric(format(contr.top.cand$contribution_receipt_date,"%W"))
contr.top.cand$weekdayf[is.na(contr.top.cand$weekdayf)] = 'Sun'
detach(package:dplyr)
library(plyr)
#normalizing the week to start at 1 for every month
contr.top.cand = ddply(contr.top.cand,.(yearmonth),transform,monthweek=1+week-min(week))
contr.top.cand = contr.top.cand %>%
filter(monthf != 'Jul',
monthf != 'Aug')
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
n = length(unique(contr.top.cand$candidate.names))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pltDate.Cand =
contr.top.cand %>%
ggplot(aes(monthweek, weekdayf, fill = candidate.names)) +
geom_tile(colour = "black") +
facet_grid(year(contr.top.cand$contribution_receipt_date)~monthf) +
xlab("Week of Month") +
ylab("") +
ggtitle("Time-Series Calendar, Democratic Presidential Primary:\nMost Funding By Candidate By Day") +
labs(fill = "Democratic Presidential\nPrimary Candidate",
caption = 'Code: "Time-Series Calendar Heatmap" by Sarang Gupta, http://www.columbia.edu/~sg3637/blog/Time_Series_Heatmaps.html',
subtitle = 'FEC Data, Date Range: 1/1/2019-6/30/2019, downloaded 9/21/2019') +
theme_classic() +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10))+
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))+
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10))+
theme(plot.caption = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=8)) +
theme(legend.position = 'bottom') +
scale_fill_manual(values = col_vector)
pltDate.Cand
detach(package:plyr)
library(dplyr)
contr.group.cand = contr.names %>%
group_by(candidate.names, contributor_state) %>%
summarise(Cand.Don.Amt = sum(contribution_receipt_amount)) %>%
arrange(contributor_state, desc(Cand.Don.Amt))
contr.top.cand = contr.group.cand %>%
group_by(contributor_state) %>%
top_n(n = 1, wt = Cand.Don.Amt)
dtMerge_Contr = merge(dtAbbr, contr.top.cand, by.x = "Abbreviation", by.y = "contributor_state")
dtMerge_Contr$Abbreviation = toupper(dtMerge_Contr$Abbreviation)
dtMerge_Contr$State = tolower(dtMerge_Contr$State)
#Contributions
#trim leading/trailing white space
dtMerge_Contr$State <- trimws(dtMerge_Contr$State)
#remove any whitespace in the middle
dtMerge_Contr$State = str_squish(dtMerge_Contr$State)
#make all upper case to match Farm dtDona
dtMerge_Contr$State <- toupper(dtMerge_Contr$State)
#trim leading/trailing white space
states$region <- trimws(states$region)
#remove any whitespace in the middle
states$region = str_squish(states$region)
#make all upper case to match Farm dtDona
states$region <- toupper(states$region)
dtMap_Contr = merge(states, dtMerge_Contr, by.x = "region", by.y = "State")
n = length(unique(dtMap_Contr$candidate.names))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
val_cols = c("darkblue", "darkred", "darkgreen",  "azure4", "chocolate", "khaki2","mediumorchid4",
"chartreuse", "darkgoldenrod1", "darkseagreen1","deeppink1", "red", "skyblue")
#graph maps
contr_map = dtMap_Contr %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, fill = candidate.names, group = group), color = "black") +
coord_quickmap() +
theme_bw() +
labs(x = "",
y = "",
title = "Democratic 2020 Presidential Primary: Highest\n Campaign Contribution Amount, By State",
subtitle = "FEC Data, 1/1/2019 - 6/30/2019") +
scale_fill_manual(values = val_cols) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10)) +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14)) +
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()) +
guides(fill=guide_legend(title= "Candidate Name"))
#theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
contr_map
contr.group.cand = contr.names %>%
group_by(candidate.names, contributor_state) %>%
summarise(Cand.Don.Cnt = n()) %>%
arrange(contributor_state, desc(Cand.Don.Cnt))
contr.top.cand = contr.group.cand %>%
group_by(contributor_state) %>%
top_n(n = 1, wt = Cand.Don.Cnt)
dtMerge_Contr = merge(dtAbbr, contr.top.cand, by.x = "Abbreviation", by.y = "contributor_state")
dtMerge_Contr$Abbreviation = toupper(dtMerge_Contr$Abbreviation)
dtMerge_Contr$State = tolower(dtMerge_Contr$State)
dtMerge_Contr = merge(dtAbbr, contr.top.cand, by.x = "Abbreviation", by.y = "contributor_state")
dtMerge_Contr$Abbreviation = toupper(dtMerge_Contr$Abbreviation)
dtMerge_Contr$State = tolower(dtMerge_Contr$State)
#Contributions
#trim leading/trailing white space
dtMerge_Contr$State <- trimws(dtMerge_Contr$State)
#remove any whitespace in the middle
dtMerge_Contr$State = str_squish(dtMerge_Contr$State)
#make all upper case to match Farm dtDona
dtMerge_Contr$State <- toupper(dtMerge_Contr$State)
#trim leading/trailing white space
states$region <- trimws(states$region)
#remove any whitespace in the middle
states$region = str_squish(states$region)
#make all upper case to match Farm dtDona
states$region <- toupper(states$region)
dtMap_Contr = merge(states, dtMerge_Contr, by.x = "region", by.y = "State")
val_cols = c("darkblue", "darkred", "darkgreen",  "azure4", "chocolate", "khaki2","mediumorchid4",
"chartreuse", "darkgoldenrod1", "darkseagreen1","deeppink1", "red", "skyblue")
#graph maps
contr_map2 = dtMap_Contr %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, fill = candidate.names, group = group), color = "black") +
coord_quickmap() +
theme_bw() +
labs(x = "",
y = "",
title = "Democratic 2020 Presidential Primary: Most\nCampaign Contributions, By State",
subtitle = "FEC Data, 1/1/2019 - 6/30/2019") +
scale_fill_manual(values = val_cols) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10)) +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14)) +
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()) +
guides(fill=guide_legend(title= "Candidate Name"))
#theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
contr_map2
ggsave(plot = contr_map2, filename = "./Graphs/Top Campaign Contributions by State.pdf")
getwd()
ggsave(plot = contr_map2, filename = "./Projects/Graphs/Top Campaign Contributions by State.pdf")
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = "./Projects/Graphs/")
getwd()
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Projects/Graphs/")
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Projects/Graphs/"))
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Projects/Graphs/"))
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Projects/Graphs"))
getwd()
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Project/Graphs"))
setwd("/Users/Broth/Grad_School/Hopkins/Fall2019/DataViz/Project/Graphs")
getwd()
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf")
contr_map2
contr_map2
#graph maps
contr_map2 = dtMap_Contr %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, fill = candidate.names, group = group), color = "black") +
coord_quickmap() +
theme_bw() +
labs(x = "",
y = "",
title = "Democratic 2020 Presidential Primary: Most\nCampaign Contributions, By State",
subtitle = "FEC Data, 1/1/2019 - 6/30/2019") +
scale_fill_manual(values = val_cols) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10)) +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14)) +
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()) +
guides(fill=guide_legend(title= "Candidate"))
contr_map2
contr_map2
contr.top.3.cand = contr.group.cand %>%
group_by(contributor_state) %>%
top_n(n = 3, wt = Cand.Don.Cnt)
View(contr.top.3.cand)
View(polls)
lubridate::monthas.Date(polls$end_date, format="%d/%m/%Y")
lubridate::month(as.Date(polls$end_date, format="%d/%m/%Y")
)
expend.select = expend.names %>%
select(candidate.names, disbursement_amount, disbursement_date)
contr.select = contr.names %>%
select(candidate.names, contribution_receipt_amount, contribution_receipt_date)
polls.select %>%
mutate(poll.month = month(as.Date(polls$end_date, format="%d/%m/%Y"),"%m"),
poll.start.day = day(as.Date(polls$start_dateformat="%d/%m/%Y"),"%d"),
table(contr.top.3.cand$candidate.names)
View(contr.top.3.cand %>% filter(candidate.names == 'Warren'))
val_cols = c("darkblue", "darkred", "darkgreen",  "azure4", "chocolate", "khaki2","mediumorchid4",
"chartreuse", "darkgoldenrod1", "darkseagreen1","deeppink1", "red", "skyblue")
#graph maps
contr_map2 = dtMap_Contr %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, fill = candidate.names, group = group), color = "black") +
coord_quickmap() +
theme_bw() +
labs(x = "",
y = "",
title = "Democratic 2020 Presidential Primary: Most\nCampaign Contributions, By State",
subtitle = "FEC Data, 1/1/2019 - 6/30/2019") +
scale_fill_manual(values = val_cols) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=10)) +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14)) +
theme(plot.subtitle = element_text(family = "Trebuchet MS", color="#666666", face="bold.italic", size=10)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line=element_blank(),
axis.ticks=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()) +
guides(fill=guide_legend(title= "Candidate"))
#theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
getwd()
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Project/Graphs"))
getwd()
ggsave(plot = contr_map2, filename = "Top Campaign Contributions by State.pdf", path = paste(getwd(),"/Project/Graphs"))
contr.top.2.cand = contr.group.cand %>%
group_by(contributor_state) %>%
top_n(n = 2, wt = Cand.Don.Cnt)
view(contr.top.2.cand %>% filter(candidate.names == 'Warren'))
table(contr.top.2.cand$candidate.names)
view(contr.top.2.cand %>% filter(candidate.names == 'Warren'))
write.csv(contr.names, 'contributions.csv')
write.csv(expend.names, 'expenditures.csv')
write.csv(polls, 'polling.csv')
getwd()
